Initially we will create different classes to handle different things:

*MainWindow inherits from QMainWindow
-This class will manage the main components of our user interface, like menus, toolbars , and status bars

*PlayerControls
- Create a "PlayerControls" class that can encapsulates
- It will encapsulate the play, pause, stop, next, and previous buttons
- For the further developments it could include sliders for volume and track progress

*PlaylistManager
- Manages the playlist, including adding, removing, and changing the order of tracks

*AudioPlayer
- Handles audio playback which we will use PortAudio or another library
- It will manage everything related to playing sound, opening files, managing buffers, and controlling playback state

*Song - We will create this one later
- The Song class could represent each track, including metadata like title, artist, album, and file path

*UI:
- First we start out by doing the entire layout of the UI which is a design I personally made
- We use placeholders just as a reference of how the product will look
- After we have the placeholders we can do the styling through Qt Style Sheets or through the widgets properties
- We can implement some interactivity like being able to click buttons (QPushButton) and select static menus

*Logic:
- Once the UI looks good and functions with the placeholders we can integrate the backend logic
- So for the Logic we will get started with being able to play and pause music, after we get that done we can go ahead
- and implement the logic for skipping or rewinding
- Then implement the logic so that the name of the song rotates as well as the image of the song
- In PlayerControls we will worry about handling the independent logic of each button
- In AudioPlayer we will handle the audio playback, move between libraries and that stuff